"use strict";(self.webpackChunkflutterando_metrics_website=self.webpackChunkflutterando_metrics_website||[]).push([[5869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(f,s(s({ref:t},d),{},{components:n})):a.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9729:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(5321);function i(e){let{version:t,severity:n,hasConfig:i,hasFix:s,isDeprecated:o}=e;return a.createElement("div",{className:"single-rule-info"},a.createElement(r.Z,{version:t,severity:n,hasConfig:i,hasFix:s,isDeprecated:o}))}},5321:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294);function r(e){let{hasConfig:t,hasFix:n,isDeprecated:r}=e;return a.createElement("div",{className:"rule-options"},t&&a.createElement("span",{title:"Configurable"},"\u2699\ufe0f"),n&&a.createElement("span",{title:"Has auto-fix"},"\ud83d\udee0"),r&&a.createElement("span",{title:"Deprecated"},"\u26a0\ufe0f"))}function i(e){let{severity:t,version:n,hasConfig:i,hasFix:s,isDeprecated:o}=e;const l=null==t?void 0:t.toLowerCase();return a.createElement("div",{className:"rule-additional-info"},a.createElement("div",null,a.createElement("span",{className:"added-in-label"},"added in:")," ",n),a.createElement("div",{className:`rule-severity ${l}`},l),a.createElement(r,{hasConfig:i,hasFix:s,isDeprecated:o}))}},2865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(9729);const s={},o=void 0,l={unversionedId:"rules/flutter/use-setstate-synchronously",id:"rules/flutter/use-setstate-synchronously",title:"use-setstate-synchronously",description:"Warns when [setState] is called past an await point (also known as asynchronous gap) within a subclass of State.",source:"@site/docs/rules/flutter/use-setstate-synchronously.mdx",sourceDirName:"rules/flutter",slug:"/rules/flutter/use-setstate-synchronously",permalink:"/flutterando_metrics/pt-br/docs/rules/flutter/use-setstate-synchronously",draft:!1,editUrl:"https://github.com/Flutterando/flutterando_metrics/tree/master/website/docs/rules/flutter/use-setstate-synchronously.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"prefer-using-list-view",permalink:"/flutterando_metrics/pt-br/docs/rules/flutter/prefer-using-list-view"},next:{title:"prefer-intl-name",permalink:"/flutterando_metrics/pt-br/docs/rules/intl/prefer-intl-name"}},u={},d=[{value:"\u2699\ufe0f Config example",id:"config-example",level:3},{value:"Example",id:"example",level:3}],p={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{version:"5.4.0",severity:"warning",hasConfig:!0,mdxType:"RuleDetails"}),(0,r.kt)("p",null,"Warns when ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},(0,r.kt)("inlineCode",{parentName:"a"},"setState"))," is called past an ",(0,r.kt)("em",{parentName:"p"},"await point")," (also known as asynchronous gap) within a subclass of State."),(0,r.kt)("p",null,"In async functions, the state of a widget may have been disposed between await points, e.g. because the user moved to another screen,\nleading to errors calling ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},(0,r.kt)("inlineCode",{parentName:"a"},"setState")),". After each await point, i.e. when a Future is awaited, the possibility\nthat the widget has been unmounted needs to be checked before calling ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},(0,r.kt)("inlineCode",{parentName:"a"},"setState")),"."),(0,r.kt)("p",null,"Consider storing Futures directly in your state and use ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"FutureBuilder")),"\nto unwrap them."),(0,r.kt)("p",null,"If this is not possible, you can also check for ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/mounted.html"},(0,r.kt)("inlineCode",{parentName:"a"},"mounted"))," to only update state when the widget is still mounted. However, an effective fix usually\ndoes not make use of ",(0,r.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/mounted.html"},(0,r.kt)("inlineCode",{parentName:"a"},"mounted")),", but rather revolves around refactoring your states."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The following patterns are recognized when statically determining mountedness:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if (mounted)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if (mounted && ..)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"if (!mounted || ..)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"try")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"switch")," mountedness per branch"),(0,r.kt)("li",{parentName:"ul"},"Divergence in ",(0,r.kt)("inlineCode",{parentName:"li"},"for"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"while")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"switch")," statements using ",(0,r.kt)("inlineCode",{parentName:"li"},"break")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"continue"))),(0,r.kt)("p",{parentName:"admonition"},"If a ",(0,r.kt)("inlineCode",{parentName:"p"},"!mounted")," check diverges, i.e. ends in a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"throw"),", the outer scope is considered mounted and vice versa:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"if (!mounted) return;\n// Should be mounted right now\nsetState(() { ... });\n\n// After this statement, need to check 'mounted' again\nawait fetch(...);\n\n// In control flow statements, 'break' and 'continue' diverges\nwhile (...) {\n  if (!mounted) break;\n  // Should be mounted right now\n  setState(() { ... });\n}\n"))),(0,r.kt)("p",null,"Additional resources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/49340116/setstate-called-after-dispose"},"https://stackoverflow.com/questions/49340116/setstate-called-after-dispose")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dart-lang.github.io/linter/lints/use_build_context_synchronously.html"},(0,r.kt)("inlineCode",{parentName:"a"},"use_build_context_synchronously")),",\na lint that checks for async usages of ",(0,r.kt)("inlineCode",{parentName:"li"},"BuildContext"))),(0,r.kt)("h3",{id:"config-example"},"\u2699\ufe0f Config example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"flutterando_metrics:\n  ...\n  rules:\n    ...\n    - use-setstate-synchronously:\n        methods:\n          - setState\n          - yourMethod\n")),(0,r.kt)("p",null,"configures the methods ",(0,r.kt)("inlineCode",{parentName:"p"},"setState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"yourMethod")," to be scanned for unchecked async calls."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c Bad:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class _MyWidgetState extends State<MyWidget> {\n  String message;\n\n  @override\n  Widget build(BuildContext context) {\n    return Button(\n      onPressed: () async {\n        String fromServer = await fetch(...);\n        // LINT\n        setState(() {\n          message = fromServer;\n        });\n      },\n      child: Text(message),\n    );\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2705 Good:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class _MyWidgetState extends State<MyWidget> {\n  String message;\n\n  @override\n  Widget build(BuildContext context) {\n    return Button(\n      onPressed: () async {\n        String fromServer = await fetch(...);\n        if (mounted) {\n          setState(() {\n            message = fromServer;\n          });\n        }\n      },\n      child: Text(message),\n    );\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2705 Good:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'class _MyWidgetState extends State<MyWidget> {\n  Future<String> message;\n\n  @override\n  Widget build(BuildContext context) {\n    return Button(\n      onPressed: () {\n        setState(() {\n          message = fetch(...);\n        });\n      },\n      child: FutureBuilder<String>(\n        future: message,\n        builder: (context, snapshot) {\n          return Text(snapshot.data ?? "...");\n        },\n      ),\n    );\n  }\n}\n')))}m.isMDXComponent=!0}}]);