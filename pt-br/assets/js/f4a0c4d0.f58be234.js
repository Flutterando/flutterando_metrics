"use strict";(self.webpackChunkflutterando_metrics_website=self.webpackChunkflutterando_metrics_website||[]).push([[643],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(r),p=o,f=u["".concat(s,".").concat(p)]||u[p]||m[p]||a;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4568:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},i="Linhas de C\xf3digo Fonte",c={unversionedId:"metrics/source-lines-of-code",id:"metrics/source-lines-of-code",title:"Linhas de C\xf3digo Fonte",description:"Linhas de C\xf3digo Fonte \xe9 um n\xfamero aproximado de linhas de c\xf3digo fonte em uma fun\xe7\xe3o ou m\xe9todo. Linhas em branco ou coment\xe1rios n\xe3o s\xe3o contados.",source:"@site/i18n/pt-br/docusaurus-plugin-content-docs/current/metrics/source-lines-of-code.md",sourceDirName:"metrics",slug:"/metrics/source-lines-of-code",permalink:"/flutterando_metrics/pt-br/docs/metrics/source-lines-of-code",draft:!1,editUrl:"https://github.com/Flutterando/flutterando_metrics/tree/master/website/docs/metrics/source-lines-of-code.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"N\xfamero de Par\xe2metros",permalink:"/flutterando_metrics/pt-br/docs/metrics/number-of-parameters"},next:{title:"D\xedvida T\xe9cnica",permalink:"/flutterando_metrics/pt-br/docs/metrics/technical_debt"}},s={},l=[{value:"Usado para",id:"used-for",level:2},{value:"Exemplo de configura\xe7\xe3o",id:"config-example",level:2},{value:"Exemplo",id:"example",level:2}],d={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"linhas-de-c\xf3digo-fonte"},"Linhas de C\xf3digo Fonte"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Linhas de C\xf3digo Fonte")," \xe9 um n\xfamero aproximado de linhas de c\xf3digo fonte em uma fun\xe7\xe3o ou m\xe9todo. Linhas em branco ou coment\xe1rios n\xe3o s\xe3o contados."),(0,o.kt)("p",null,"Esta m\xe9trica \xe9 usada para medir o tamanho de um programa de computador, contando o n\xfamero de linhas no texto do c\xf3digo fonte do programa. ",(0,o.kt)("strong",{parentName:"p"},"SLOC")," \xe9 tipicamente usado para prever a quantidade de esfor\xe7o que ser\xe1 necess\xe1ria para desenvolver um programa, bem como para estimar a produtividade ou manutenibilidade da programa\xe7\xe3o uma vez que o software \xe9 produzido."),(0,o.kt)("h2",{id:"used-for"},"Usado para"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/flutterando_metrics/pt-br/docs/metrics/anti-patterns/long-method"},"M\xe9todo Longo"))),(0,o.kt)("h2",{id:"config-example"},"Exemplo de configura\xe7\xe3o"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"flutterando_metrics:\n  ...\n  metrics:\n    ...\n    source-lines-of-code: 50\n    ...\n")),(0,o.kt)("h2",{id:"example"},"Exemplo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"MetricComputationResult<int> computeImplementation(\n  Declaration node,\n  Iterable<ScopedClassDeclaration> classDeclarations,\n  Iterable<ScopedFunctionDeclaration> functionDeclarations,\n  InternalResolvedUnitResult source,\n) {\n  final visitor = SourceCodeVisitor(source.lineInfo);\n  node.visitChildren(visitor);\n\n  return MetricComputationResult(\n    value: visitor.linesWithCode.length,\n    context: _context(node, visitor.linesWithCode, source),\n  );\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Linhas de C\xf3digo Fonte")," para a fun\xe7\xe3o do exemplo \xe9 ",(0,o.kt)("strong",{parentName:"p"},"6"),"."))}m.isMDXComponent=!0}}]);